CurVer=''
Progrm=${0##*/}

Err(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -gt 0 ] && exit $1
}

Domain='https://github.com'

Usage(){
	while read; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${Progrm^^} ($CurVer)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Dummy description for this template.

		SYNTAX:     $Progrm [OPTS]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --update|-U             - Check for updates to $Progrm.
		            --debug|-D              - Enables the built-in Bash debugging.

		SITE:       $Domain/terminalforlife/Extra
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf "%s\n" "$CurVer"; exit 0 ;;
		--quiet|-q)
			BeQuiet='true' ;;
		--debug|-D)
			DebugMe='true' ;;
		--update|-U)
			DoUpdate='true' ;;
		#-*)
		#	Err 1 $LINENO 'Incorrect argument(s) specified.' ;;
		#*)
		#	break ;;
		*)
			Err 1 $LINENO 'Incorrect argument(s) specified.' ;;
	esac
	shift
done

declare -i DepCount=0
for Dep in :; {
	if ! type -fP "$Dep" > /dev/null 2>&1; then
		Err 0 $LINENO "Dependency '$Dep' not met."
		DepCount+=1
	fi
}

[ $DepCount -eq 0 ] || exit 1

if [ "$DoUpdate" == 'true' ]; then
	if ! type -fP wget > /dev/null 2>&1; then
		Err 1 $LINENO "Dependency 'wget' not met."
	fi

	VerURL="$Domain/terminalforlife/Extra/raw/master/versions"
	while IFS='=' read -a CurLine; do
		if  [ "${CurLine[0]}" == "$Progrm" ]; then
			NewVer=${CurLine[1]}
			if [[ ${NewVer//-} =~ ^[0-9]{8}$ ]]; then
				if [ ${NewVer//-} -gt ${CurVer//-} ]; then
					while read; do
						printf "%s\n" "$REPLY"
					done <<-EOF
						New version available:    $NewVer
						Current version:          $CurVer
					EOF
				fi
			else
				Err 1 $LINENO 'Failed to check for available updates.'
			fi
		fi
	done <<< "$(wget -qO - "$VerURL")"

	exit 0
fi

#[ $UID -eq 0 ] || Err 1 $LINENO 'Root access is required.'

[ "$BeQuiet" == 'true' ] && exec > /dev/null
[ "$DebugMe" == 'true' ] && set -x
